>>> from news.models import *

----------------------------
1.Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> u1 = User.objects.create_user('Maria')
>>> u2 = User.objects.create_user('Alexander')
----------------------------

----------------------------
2. Создать два объекта модели Author, связанные с пользователями.
>>> a1 = Author.objects.create(user=u1)
>>> a2 = Author.objects.create(user=u2)
----------------------------

----------------------------
3. Добавить 4 категории в модель Category.
>>> cats_cat = Category.objects.create(name='Котики')
>>> people_cat = Category.objects.create(name='Люди')
>>> cars_cat = Category.objects.create(name='Автомобили')
>>> animals_cat = Category.objects.create(name='Животные')
----------------------------

----------------------------
4. Добавить 2 статьи и 1 новость.
>>>  p1 = Post.objects.create(author=a2, title='Почему котики мурчат?', text='По одной из популярных
версий, мурлыканье кошки способствует выработке гормона, уменьшающего чувство страха, причем не только у животных, но и
человека. Согласно исследованиям Университета Миннесоты, регулярное общение с кошкой сокращает вероятность сердечного
приступа и других сердечно-сосудистых заболеваний почти на треть. И все благодаря удивительной способности питомцев
снимать тревогу и стресс мерными мурчащими звуками.По результатам тестов, кошачье мурлыканье нормализует пульс и
артериальное давление. А если не забывать при этом гладить питомца по шерстке, то можно поспособствовать выработке
окситоцина – гормона счастья.')

>>> p2 = Post.objects.create(author=a2, title='Раздвигая границы дозволенного', text='Одной из самых
сильных сторон Ferrari является уникальная синергия, существующая между исследовательским центром компании Centro Stile
и аэродинамикой. Объедините эту взаимосвязь, достигнутую большим трудом, с тем фактом, что в Маранелло все отделы
разработки расположены всего в нескольких метрах друг от друга, и вы начнете понимать способность Ferrari создавать
самые красивые автомобили в мире без каких-либо компромиссов, связанных с производительностью. Две новинки «Гарцующего
жеребца» — новый Ferrari SF90 XX Stradale и спайдер Ferrari SF90 XX доказывают, что это возможно. ')

>>> p3 = Post.objects.create(author=a1, type=Post.news, title='Ноебелевская премия. Мохаммади', text='Нобелевская
премия мира 2023 года присуждена иранской правозащитнице и вице-президенту правозащитного центра "Защитники прав
человека" Наргиз Мохаммади. В момент объявления этого решения Норвежского нобелевского комитета лауреат находится в
заключении. Премию ей присудили "за ее усилия в борьбе против угнетения женщин в Иране и в продвижении прав и свобод
человека для всех".')
----------------------------

----------------------------
5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> p1.category.add(cats_cat)
>>> p1.category.add(animals_cat)
>>> p3.category.add(people_cat)
>>> p2.category.add(cars_cat)
----------------------------

----------------------------
6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> c1 = Comment.objects.create(user=u1, post=p1, text='Кооотикииии<3')
>>> c2 = Comment.objects.create(user=u1, post=p2, text='Очень крутая статья!')
>>> с3 = Comment.objects.create(user=u2, post=p3, text='Поздравляем Мохаммади!')
>>> c4 = Comment.objects.create(user=u2, post=p1, text='Муррр')
----------------------------

----------------------------
7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
# в консоли методs вызванs рандомное кол-во раз, но котикам лайков больше всего :)
>>> c1.like()
>>> c1.dislike()
>>> c2.like()
>>> c2.dislike()
>>> c3.like()
>>> c3.dislike()
>>> c4.like()
>>> c4.dislike()
>>> p1.like()
>>> p1.dislike()
>>> p2.like()
>>> p2.dislike()
>>> p3.like()
>>> p3.dislike()
----------------------------

----------------------------
8. Обновить рейтинги пользователей.
>>> u1.update_rating()
>>> u2.update_rating()
----------------------------

----------------------------
9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> Author.objects.order_by("-rating").values("user__username", "rating")[0]
{'user__username': 'Alexander', 'rating': 37}
----------------------------

----------------------------
10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> best_post = Post.objects.order_by("-rating").first() # определение лучшей публикации

>>> best_post.preview() # вывод превью
'По одной из популярных версий, мурлыканье кошки способствует выработке гормона, уменьшающего чувство страха, причем не тольк...'

>>> Post.objects.order_by("-rating").values("creation_time", "author__user__username", "rating", "title")[0] # вывод всего остального
{'creation_time': datetime.datetime(2023, 10, 6, 11, 55, 52, 913725, tzinfo=datetime.timezone.utc), 'author__user__username': 'Alexander', 'rating': 6, 'title': 'Почему котики мурчат?'}
----------------------------

----------------------------
11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> Comment.objects.filter(post=best_post).values("creation_time", "user__username", "rating", "text")
<QuerySet [{'creation_time': datetime.datetime(2023, 10, 6, 12, 22, 59, 206567, tzinfo=datetime.timezone.utc), 'user__username': 'Maria', 'rating': 6, 'text': 'Кооотикииии<3'},
{'creation_time': datetime.datetime(2023, 10, 6, 20, 38, 57, 260305, tzinfo=datetime.timezone.utc), 'user__username': 'Alexander', 'rating': 0, 'text': 'Муррр'}]>
----------------------------